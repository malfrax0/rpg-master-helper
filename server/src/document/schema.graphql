scalar JSON
scalar timestamptz

type User {
    id: String!
    name: String!
    email: String!
    administratedGames: [Game!]
    games: [CharacterSheet!]
}

type Game {
    id: String!
    admin: User
    adminId: String
    name: String!
    description: String
    characters: [CharacterSheet!]
    rpgInfo: CharacterSheetTemplate
    isPlaying: Boolean!
}

input GameInput {
    name: String!
    description: String,
    templateId: ID!
}

input GameHistoryInput {
    gameId: String!,
    title: String!,
    content: String!
}

type GameHistory {
    id: String!
    user: User
    userId: String
    game: Game
    gameId: String
    title: String!
    content: String!
}

input GameEventInput {
    gameId: String!
    startAt: timestamptz!
    duration: Int!
    title: String!
    content: String!
}

type GameEvent {
    id: String!
    title: String!
    content: String!
    game: Game
    gameId: String
    startAt: timestamptz
    duration: Int
    participations: [GameEventParticipation!]
}

enum GameEventResponse {
    PARTICIPATE
    MAYBE
    CANNOT
}

type GameEventParticipation {
    id: String!
    user: User
    userId: String
    response: String!
}

type CharacterSheet {
    id: String!
    game: Game
    gameId: String
    user: User
    userId: String
    characterStats: [CharacterStat!]
}

type CharacterStat {
    id: String!
    characterSheet: CharacterSheet
    characterSheetId: String!
    key: String!
    value: String
}

type CharacterSheetTemplate {
    id: String!
    template: JSON!
    name: String!
    description: String
}

type AuthResponse {
    token: String
    error: String
    user: User
}

input Pagination {
    first: Int,
    after: Int
}

input UserFilter {
    name: String,
    ignoreInGames: [String],
    onlyInGames: [String]
}

type Query {
    auth: Boolean!

    game(gameId: String!): Game!
    myGames: [Game!]

    characterSheet(characterSheetId: String!): CharacterSheet!

    characterSheetTemplate(characterSheetTemplateId: String!): CharacterSheetTemplate!
    characterSheetTemplates: [CharacterSheetTemplate!]

    me: User!
    user(userId: String!): User!
    users(page: Pagination!, filter: UserFilter): [User!]

    event(eventId: String!): GameEvent!
    events(page: Pagination!, gameId: String!): [GameEvent!]

    history(historyId: String!): GameHistory!
    histories(page: Pagination!, gameId: String!): [GameHistory!]
}

type Mutation {
    login(email: String!, password: String!): AuthResponse!
    register(email: String!, password: String!, name: String!): AuthResponse!
    
    createGame(game: GameInput!): Game!
    startGame(gameId: String!): Boolean!
    endGame(gameId: String!): Boolean!

    inviteUserToGame(gameId: String!, userId: String!): CharacterSheet!
    removeUserFromGame(gameId: String!, userId: String!): Boolean!

    updateValueOfCharacterSheet(characterSheetId: String!, key: String!, value: String!): CharacterStat!

    createCharacterSheetTemplate(name: String!, description: String!, json: JSON!): CharacterSheetTemplate!

    createEvent(event: GameEventInput!): GameEvent!
    participateToEvent(gameEventId: String!, response: GameEventResponse!): GameEvent!

    createHistory(history: GameHistoryInput!): GameHistory!
}

type Subscription {
    statChanged(characterSheetId: String!): CharacterStat
    gameStateChanged: Boolean!
}